---
title: "Stats 506 PS1"
author: Alyssa Yang
format: html
---

```{r,echo=FALSE,message=FALSE,warning=FALSE}
# Set so that long lines in R will be wrapped:
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
```

# Problem 1 - Wine Data

## 1a
```{r}
# set the working directory
setwd("~/Desktop/Stats\ 506/homework/Stats\ 506\ PS1")

# create column names vector
wine_colnames <- c("Class", "Alcohol", "Malic acid", "Ash", "Alcalinity of ash", 
                   "Magnesium", "Total phenols", "Flavanoids", "Nonflavanoid phenols", 
                   "Proanthocyanins", "Color intensity", "Hue", 
                   "OD280/OD315 of diluted wines", "Proline")

# read in data from wine.data and put it in a data frame
wine <- data.frame(read.csv("wine.data", header = FALSE))
names(wine) <- wine_colnames
```


## 1b
```{r}
#| code-fold: true
# check that number of wines in each class is correct
# 1: 59, 2: 71, 3: 48
class_1 <- wine[wine$Class == 1,]
cat("Number of wines in class 1: ", nrow(class_1), "\n")

class_2 <- wine[wine$Class == 2,]
cat("Number of wines in class 2: ", nrow(class_2), "\n")

class_3 <- wine[wine$Class == 3,]
cat("Number of wines in class 3: ", nrow(class_3), "\n")
```


## 1c
### 1: What is the correlation between alcohol content and color intensity?
```{r}
#| code-fold: true
cat("Correlation: ", cor(wine$Alcohol, wine$`Color intensity`))
```

### 2: Which class has the highest correlation? Which has the lowest?
```{r}
#| code-fold: true
# create correlation matrix and select top triangle values
correlation_matrix <- cor(wine)
upper_triangle <- upper.tri(correlation_matrix)
correlations <- correlation_matrix[upper_triangle]

# find highest and lowest values
highest <- max(correlations)
lowest <- min(correlations)

# find the names of variables with these values
highest_idx <- which(correlation_matrix == highest, arr.ind = TRUE)
lowest_idx <- which(correlation_matrix == lowest, arr.ind = TRUE)

highest_correlation <- colnames(correlation_matrix)[highest_idx]
lowest_correlation <- colnames(correlation_matrix)[lowest_idx]

# only need the first 2 because the matrix is symmetrical
cat("Classes with the highest correlation: ", highest_correlation[1], ", ", highest_correlation[2], "\n")
cat("Classes with the lowest correlation: ", lowest_correlation[1], ", ", lowest_correlation[2], "\n")
```


### 3: What is the alcohol content of the wine with the highest color intensity?
```{r}
#| code-fold: true
# find the wine with highest color intensity
highest_intensity <- max(wine$`Color intensity`)
highest_intensity_wine <- which(wine$`Color intensity` == highest_intensity)

# find the alcohol content of the wine
cat("Alcohol content: ", wine$Alcohol[highest_intensity_wine])
```


### 4: What percentage of wines had a higher content of proanthocyanins compare to ash?
```{r}
#| code-fold: true
# find # wines that have higher content of proanthocyanins compared to ash
higher_pro_wines <- wine[wine$Proanthocyanins > wine$Ash,]
num_pro_wines <- nrow(higher_pro_wines)

# find percentage of wines
total_num_wines <- nrow(wine)
percentage <- (num_pro_wines / total_num_wines) * 100
cat("Percentage of wines: ", percentage, "%")
```


## 1d
```{r}
#| code-fold: true
# find the overall averages
overall_avg <- sapply(wine[, -1], mean)

# find averages for each class
class_1 <- wine[wine$Class == 1, -1]
class_2 <- wine[wine$Class == 2, -1]
class_3 <- wine[wine$Class == 3, -1]

class_1_avg <- sapply(class_1, mean)
class_2_avg <- sapply(class_2, mean)
class_3_avg <- sapply(class_3, mean)

# put all the averages into a table identifying the average value of each variable, 
# providing one row for the overall average, and one row per class with class averages
avg_table <- data.frame(overall_avg, class_1_avg, class_2_avg, class_3_avg)
names(avg_table) <- c("Overall Average", "Class 1 Average", "Class 2 Average", "Class 3 Average")
t(avg_table)
```


## 1e
```{r}
#| code-fold: true
# find total phenol levels for each class
class_1_phenols <- wine$`Total phenols`[wine$Class == 1]
class_2_phenols <- wine$`Total phenols`[wine$Class == 2]
class_3_phenols <- wine$`Total phenols`[wine$Class == 3]

# conduct pairwise t-tests
t_1_2 <- t.test(class_1_phenols, class_2_phenols)
t_1_3 <- t.test(class_1_phenols, class_3_phenols)
t_2_3 <- t.test(class_2_phenols, class_3_phenols)

# print out p-values to determine significance of the tests
cat("P-value for t-test for phenols in classes 1 and 2: ", t_1_2$p.value, "\n")
cat("P-value for t-test for phenols in classes 1 and 3: ", t_1_3$p.value, "\n")
cat("P-value for t-test for phenols in classes 2 and 3: ", t_2_3$p.value, "\n")

cat("Since the p-values for all 3 tests are less than a significance level of alpha = 0.05, ", "\n", "the difference between phenol levels in each of the pairs of classes is statistically", "\n", "significant")
```


# Problem 2 - AskAManager.org Data

## 2a
```{r}
# read in the file AskAManager.csv and import the data into a data frame
manager <- data.frame(read.csv("AskAManager.csv"))
```


## 2b
```{r}
# clean and simplify variable names
names(manager) <- c("Index", "Timestamp", "Age", "Industry", "Job Title", 
                    "Additional Job Context", "Annual Salary", 
                    "Additional Compensation", "Currency", "Other Currency", 
                    "Additional Income Context", "Country", "State", "City", 
                    "Years Professional Experience", "Years Experience in Field", 
                    "Education Level", "Gender", "Race")
```


## 2c
```{r}
#| code-fold: true
# print the number of observations before restricting the data
cat("Number of observations before restricting the data: ", nrow(manager), "\n")

# restrict the data to only those being paid in USD and print the number of observations after
manager <- manager[manager$Currency == "USD",]
cat("Number of observations after restricting the data: ", nrow(manager))
```


## 2d
```{r}
#| code-fold: true
# print the number of observations before restricting the data
cat("Number of observations before restricting the data: ", nrow(manager), "\n")

# convert variables to factors
manager$Age = as.factor(manager$Age)
age_levels = levels(manager$Age)

manager$'Years Professional Experience' = as.factor(manager$'Years Professional Experience')
prof_levels = levels(manager$'Years Professional Experience')

manager$'Years Experience in Field' = as.factor(manager$'Years Experience in Field')
field_levels = levels(manager$'Years Experience in Field')

# take highest age in the age range
manager$highest_age <- ifelse(manager$Age == age_levels[1], 24,
                        ifelse(manager$Age == age_levels[2], 34,
                        ifelse(manager$Age == age_levels[3], 44,
                        ifelse(manager$Age == age_levels[4], 54,
                        ifelse(manager$Age == age_levels[5], 64,
                        ifelse(manager$Age == age_levels[6], 65,
                        ifelse(manager$Age == age_levels[7], 18, NA)))))))

# take lowest amount of years of professional experience
manager$lowest_prof_exp <- ifelse(manager$'Years Professional Experience' == prof_levels[1], 0,
                        ifelse(manager$'Years Professional Experience' == prof_levels[2], 11,
                        ifelse(manager$'Years Professional Experience' == prof_levels[3], 2,
                        ifelse(manager$'Years Professional Experience' == prof_levels[4], 21,
                        ifelse(manager$'Years Professional Experience' == prof_levels[5], 31,
                        ifelse(manager$'Years Professional Experience' == prof_levels[6], 41,
                        ifelse(manager$'Years Professional Experience' == prof_levels[7], 5,
                        ifelse(manager$'Years Professional Experience' == prof_levels[8], 8, NA))))))))

# take the lowest amount of years of experience in their field
manager$lowest_field_exp <- ifelse(manager$'Years Experience in Field' == prof_levels[1], 0,
                        ifelse(manager$'Years Experience in Field' == prof_levels[2], 11,
                        ifelse(manager$'Years Experience in Field' == prof_levels[3], 2,
                        ifelse(manager$'Years Experience in Field' == prof_levels[4], 21,
                        ifelse(manager$'Years Experience in Field' == prof_levels[5], 31,
                        ifelse(manager$'Years Experience in Field' == prof_levels[6], 41,
                        ifelse(manager$'Years Experience in Field' == prof_levels[7], 5,
                        ifelse(manager$'Years Experience in Field' == prof_levels[8], 8, NA))))))))

# put columns into variables for easier readability
age <- manager$highest_age
prof_exp <- manager$lowest_prof_exp
field_exp <- manager$lowest_field_exp

# eliminate rows for which it is not possible (can't start working before 18)
manager <- manager[(age - prof_exp >= 18) & (age - field_exp >= 18),]

# print the number of observations after restricting the data
cat("Number of observations after restricting the data: ", nrow(manager), "\n")
```


## 2e
```{r}
#| code-fold: true
# print the number of observations before restricting the data
cat("Number of observations before restricting the data: ", nrow(manager), "\n")

# Find the IQR, 25th percentile, and 75th percentile of salaries
iqr_salary <- IQR(manager$'Annual Salary')
q1 <- quantile(manager$`Annual Salary`, 0.25)
q3 <- quantile(manager$`Annual Salary`, 0.75)

# Find the upper and lower bounds
upper_bound <- q3 + (1.5 * iqr_salary)
lower_bound <- q1 - (1.5 * iqr_salary)

# Select only the points whose salaries are not outliers
salary <- manager$`Annual Salary`
manager <- manager[(salary <= upper_bound) & (salary >= lower_bound),]

# print the number of observations after restricting the data
cat("Number of observations after restricting the data: ", nrow(manager), "\n")

cat("I chose to use the interquartile range to eliminate outliers in the dataset", "\n",
"because I wanted to keep as many datapoints as possible, but outliers", "\n",
"would drag the dataset too much (have too much influence on the spread", "\n",
"and statistics on it). Thus, by removing only outliers, we keep most of", "\n",
"the data but remove highly influential data points.")
```


# Problem 3

## 3a
```{r}
#' Function that checks whether or not a given number is a valid palindrome
#'
#' @param num: a positive integer 
#'
#' @return A list with two elements:
#'    isPalindromic: A logical value indicating if the input is palindromic.
#'    reversed: The input with its digits reversed.
isPalindromic <- function(num) {
  # check if input is a positive integer
  if (!is.numeric(num)) {
    stop("Input must be an integer")
  }
  if (num < 0) {
    stop("Input must be positive")
  }
  
  # reverse the input and store into new variable
  num_char <- as.character(num)
  reversed_split <- rev(strsplit(num_char, "")[[1]])
  reversed_num <- as.numeric(paste(reversed_split, collapse = ""))
  
  # bool indicating whether input is a palindrome (input is same as its reverse)
  is_palindrome <- (num == reversed_num)
  
  return(list(isPalindromic = is_palindrome, reversed = reversed_num))
}
```


## 3b
```{r}
#' Function that finds the next palindromic number strictly greater than a given number
#'
#' @param num: a positive integer
#'
#' @return A vector of length 1 with the next palindromic number greater than the input
nextPalindrome <- function(num) {
  # check if input is a positive integer
  if (!is.numeric(num)) {
    stop("Input must be an integer")
  }
  if (num < 0) {
    stop("Input must be positive")
  }
  
  # find the next strictly greater palindromic number
  num = num + 1
  while (!isPalindromic(num)$isPalindromic) {
    num = num + 1
  }
  
  return(num)
}
```


## 3c
```{r}
#| code-fold: true
cat("i. ", nextPalindrome(391), "\n")
cat("ii. ", nextPalindrome(9928), "\n")
cat("iii. ", nextPalindrome(19272719), "\n")
cat("iv. ", nextPalindrome(109), "\n")
cat("v. ", nextPalindrome(2))
```













